//
//  ImprovedModalTests.swift
//  gdm
//
//  Created by Anatoliy Podkladov on 2025-07-13.
//


import XCTest

extension FullyIsolatedUITestCase {
    
    /// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
    func debugModalScreen() {
        print("\n=== DEBUGGING MODAL SCREEN ===")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        print("Sheets count: \(app.sheets.count)")
        print("Other elements count: \(app.otherElements.count)")
        print("ScrollViews count: \(app.scrollViews.count)")
        print("Groups count: \(app.groups.count)")
        print("Tables count: \(app.tables.count)")
        print("CollectionViews count: \(app.collectionViews.count)")
        print("Windows count: \(app.windows.count)")
        
        // –í—ã–≤–æ–¥–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        print("\n=== UI HIERARCHY AFTER BUTTON TAP ===")
        print(app.debugDescription)
        
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        print("\n=== SEARCHING FOR MODAL ELEMENTS ===")
        
        // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –º–æ–¥–∞–ª—å–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º
        let possibleModals = [
            app.sheets.firstMatch,
            app.otherElements.containing(.any, identifier: "InputViewContainer").firstMatch,
            app.scrollViews.firstMatch,
            app.groups.firstMatch,
            app.otherElements.element(boundBy: app.otherElements.count - 1), // –ü–æ—Å–ª–µ–¥–Ω–∏–π other element
            app.windows.element(boundBy: app.windows.count - 1) // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–∫–Ω–æ
        ]
        
        for (index, element) in possibleModals.enumerated() {
            if element.exists {
                print("‚úÖ Possible modal \(index): \(element.elementType.readableName) - exists: \(element.exists), hittable: \(element.isHittable)")
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å identifier
                if !element.identifier.isEmpty {
                    print("   Identifier: '\(element.identifier)'")
                }
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å label
                if !element.label.isEmpty {
                    print("   Label: '\(element.label)'")
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º frame
                let frame = element.frame
                print("   Frame: \(frame)")
            } else {
                print("‚ùå Possible modal \(index): not found")
            }
        }
        
        // –ò—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        searchModalByContent()
    }
    
    private func searchModalByContent() {
        print("\n=== SEARCHING BY CONTENT ===")
        
        // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        let keywords = ["Input", "Add", "Record", "Save", "Cancel", "Done", "Close"]
        
        for keyword in keywords {
            let elements = app.descendants(matching: .any).containing(.any, identifier: keyword)
            if elements.count > 0 {
                print("Found \(elements.count) elements containing '\(keyword)'")
                
                for i in 0..<min(elements.count, 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                    let element = elements.element(boundBy: i)
                    if element.exists {
                        print("  - \(element.elementType.readableName): '\(element.identifier)' '\(element.label)'")
                    }
                }
            }
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º
        let textElements = app.descendants(matching: .any).matching(NSPredicate(format: "label CONTAINS[c] 'sugar' OR label CONTAINS[c] 'glucose' OR label CONTAINS[c] 'insulin'"))
        print("Found \(textElements.count) elements with diabetes-related text")
        
        // –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ—è–≤–∏–≤—à–∏—Ö—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏)
        findNewlyAppearedElements()
    }
    
    private func findNewlyAppearedElements() {
        print("\n=== FINDING NEWLY APPEARED ELEMENTS ===")
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∏—â–µ–º —Ç–µ, —á—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ—è–≤–∏–ª–∏—Å—å
        let allElements = app.descendants(matching: .any)
        var newElements: [XCUIElement] = []
        
        for i in 0..<min(allElements.count, 50) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
            let element = allElements.element(boundBy: i)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ (–º–æ–¥–∞–ª—å–Ω—ã–µ –æ–±—ã—á–Ω–æ —Ç–∞–º)
            if element.exists && element.frame.minY < 200 && element.frame.height > 100 {
                newElements.append(element)
            }
        }
        
        print("Found \(newElements.count) elements in modal area")
        for (index, element) in newElements.enumerated() {
            print("  \(index): \(element.elementType.readableName) - '\(element.identifier)' - frame: \(element.frame)")
        }
    }
}

// MARK: - –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –æ—Ç–ª–∞–¥–∫–æ–π

class ImprovedModalTests: FullyIsolatedUITestCase {
    
    func testFindModalScreen() {
        // Arrange
        launchApp()
        
        // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        let elementCountBefore = app.descendants(matching: .any).count
        let sheetCountBefore = app.sheets.count
        
        print("üîç Before button tap:")
        print("  Total elements: \(elementCountBefore)")
        print("  Sheets: \(sheetCountBefore)")
        
        // Act - –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
        let addButton = app.buttons["AddRecordButton"]
        XCTAssertTrue(waitForElement(addButton), "Add button should exist")
        
        addButton.tap()
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        Thread.sleep(forTimeInterval: 1.0)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –Ω–∞–∂–∞—Ç–∏—è
        let elementCountAfter = app.descendants(matching: .any).count
        let sheetCountAfter = app.sheets.count
        
        print("üîç After button tap:")
        print("  Total elements: \(elementCountAfter)")
        print("  Sheets: \(sheetCountAfter)")
        print("  New elements appeared: \(elementCountAfter - elementCountBefore)")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        debugModalScreen()
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –Ω–∞–π—Ç–∏ –º–æ–¥–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
        let modal = findModalScreenByAnyMeans()
        
        if let modal {
            print("‚úÖ Modal screen found: \(modal.elementType.readableName)")
            XCTAssertTrue(modal.exists, "Modal should exist")
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            closeModal(modal)
        } else {
            XCTFail("Could not find modal screen")
        }
    }
    
    func testDataIsCompletelyIsolatedFixed() {
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        
        launchApp()
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤: \(testSuiteName!)")
        
        let addButton = app.buttons["AddRecordButton"]
        XCTAssertTrue(waitForElement(addButton), "Add button should exist")
        
        // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
        addButton.tap()
        
        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        Thread.sleep(forTimeInterval: 1.0)
        
        // –ò—â–µ–º –º–æ–¥–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        let modal = findModalScreenByAnyMeans()
        
        XCTAssertNotNil(modal, "Modal screen should appear")
        
        if let modal {
            print("‚úÖ Modal found: \(modal.elementType.readableName)")
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            closeModal(modal)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –∑–∞–∫—Ä—ã–ª—Å—è
            // Thread.sleep(forTimeInterval: 0.5)
            XCTAssertFalse(modal.exists, "Modal should be dismissed")
        }
        
        print("‚úÖ –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–µ–ª –¥–ª—è: \(testSuiteName!)")
    }
    
    // MARK: - Helper Methods
    
//    private func findModalScreenByAnyMeans() -> XCUIElement? {
//        print("\nüîç Trying to find modal screen...")
//        
//        // –°–ø–æ—Å–æ–± 1: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π sheet
//        let sheet = app.sheets.firstMatch
//        if sheet.exists {
//            print("‚úÖ Found as sheet")
//            return sheet
//        }
//        
//        // –°–ø–æ—Å–æ–± 2: –ü–æ–∏—Å–∫ –ø–æ identifier InputView
//        let inputView = app.otherElements["InputViewContainer"]
//        if inputView.exists {
//            print("‚úÖ Found by InputView identifier")
//            return inputView
//        }
//        
//        // –°–ø–æ—Å–æ–± 3: –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π other element
//        if app.otherElements.count > 0 {
//            let lastOther = app.otherElements.element(boundBy: app.otherElements.count - 1)
//            if lastOther.exists && lastOther.frame.height > 200 {
//                print("‚úÖ Found as last other element")
//                return lastOther
//            }
//        }
//        
//        // –°–ø–æ—Å–æ–± 4: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (—Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞, –≤–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ–≤–∏–Ω–∞)
//        let centerTopCoordinate = app.coordinate(withNormalizedOffset: CGVector(dx: 0.5, dy: 0.3))
//        let elementAtCenter = centerTopCoordinate.referencedElement
//        if elementAtCenter.exists && elementAtCenter.elementType != .application {
//            print("‚úÖ Found by center coordinate")
//            return elementAtCenter
//        }
//        
//        // –°–ø–æ—Å–æ–± 5: –ò—â–µ–º —Å—Ä–µ–¥–∏ ScrollViews
//        for i in 0..<app.scrollViews.count {
//            let scrollView = app.scrollViews.element(boundBy: i)
//            if scrollView.exists && scrollView.frame.height > 300 {
//                print("‚úÖ Found as scroll view")
//                return scrollView
//            }
//        }
//        
//        // –°–ø–æ—Å–æ–± 6: –ò—â–µ–º —Å—Ä–µ–¥–∏ Groups
//        for i in 0..<app.groups.count {
//            let group = app.groups.element(boundBy: i)
//            if group.exists && group.frame.height > 200 {
//                print("‚úÖ Found as group")
//                return group
//            }
//        }
//        
//        // –°–ø–æ—Å–æ–± 7: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ñ—Ä–µ–π–º—É —á–µ—Ä–µ–∑ Swift
//        let allElements = app.descendants(matching: .any).allElementsBoundByIndex
//        let largeElements = allElements.filter {
//            $0.frame.height > 200 && $0.frame.width > 200
//        }
//        if let element = largeElements.last {
//            print("‚úÖ Found by frame size: \(element.frame)")
//            return element
//        }
//        
//        print("‚ùå Modal not found by any method")
//        return nil
//    }
    
    private func closeModal(_ modal: XCUIElement) {
        print("üîÑ Trying to close modal...")
        
        // –°–ø–æ—Å–æ–± 1: Swipe down
        modal.swipeDown(velocity: .fast)
        // Thread.sleep(forTimeInterval: 0.5)
        
        if !modal.exists {
            print("‚úÖ Closed by swipe down")
            return
        }
        
        // –°–ø–æ—Å–æ–± 2: –ò—â–µ–º –∫–Ω–æ–ø–∫—É Cancel/Close
        let cancelButton = modal.buttons.matching(NSPredicate(format: "label CONTAINS[c] 'cancel' OR label CONTAINS[c] 'close' OR label CONTAINS[c] 'done'")).firstMatch
        if cancelButton.exists {
            cancelButton.tap()
            print("‚úÖ Closed by cancel button")
            return
        }
        
        // –°–ø–æ—Å–æ–± 3: –¢–∞–ø –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        let outsideCoordinate = app.coordinate(withNormalizedOffset: CGVector(dx: 0.1, dy: 0.1))
        outsideCoordinate.tap()
        Thread.sleep(forTimeInterval: 0.5)
        
        if !modal.exists {
            print("‚úÖ Closed by tapping outside")
            return
        }
        
        // –°–ø–æ—Å–æ–± 4: Escape key (–Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ) –∏–ª–∏ —Å–≤–∞–π–ø –≤–Ω–∏–∑ –∫–∞–∫ fallback
        let escapeKey = app.keys["Escape"].firstMatch
        if escapeKey.exists {
            escapeKey.tap()
            print("‚úÖ Closed by Escape key")
            return
        }
    }
}
