//
//  SomeUITest.swift
//  gdmUITests
//
//  Created by Anatoliy Podkladov on 2025-07-13.
//

@testable import gdm
import XCTest

extension XCTestCase {
    func waitForElement(_ element: XCUIElement, timeout: TimeInterval = 5.0) -> Bool {
        element.waitForExistence(timeout: timeout)
    }
}

// MARK: - –¢–µ—Å—Ç—ã –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

class DataIsolationValidationTests: FullyIsolatedUITestCase {
    
    func testDataIsCompletelyIsolated() {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—É—é –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        // Arrange
        launchApp()
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤: \(testSuiteName!)")
        
        // Act & Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        let addButton = app.buttons["ShowRecordViewButton"]
        XCTAssertTrue(waitForElement(addButton), "Add button should exist")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        // (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–∫—Ä—ã—Ç—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ UI
        addButton.tap()
        let sheet = app.sheets.firstMatch
        
        print("\(app.sheets.count) // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏, —Å–∫–æ–ª—å–∫–æ sheet'–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ")
        
        // –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º –≤—Å—é –∏–µ—Ä–∞—Ä—Ö–∏—é —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        print("=== UI HIERARCHY ===")
        print(app.debugDescription)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        print("NavigationBars count: \(app.navigationBars.count)")
        print("Other elements count: \(app.otherElements.count)")
        print("Buttons count: \(app.buttons.count)")
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        let allElements = app.descendants(matching: .any)
        for element in allElements.allElementsBoundByIndex {
            if !element.identifier.isEmpty {
                print("Found element: \(element.identifier) - type: \(element.elementType.readableName), label: \(element.label), exists: \(element.exists)")
            }
        }
        
        XCTAssertTrue(waitForElement(sheet, timeout: 3.0), "Sheet should appear")
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º sheet
        sheet.swipeDown()
        
        print("‚úÖ –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–µ–ª –¥–ª—è: \(testSuiteName!)")
    }
    
    func testSecondIsolatedTest() {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —Å –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–∏—Å—Ç—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        
        launchApp()
        print("üîç –í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –≤: \(testSuiteName!)")
        
        let addButton = app.buttons["ShowRecordViewButton"]
        XCTAssertTrue(waitForElement(addButton), "Add button should exist")
        
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω "–≤–∏–¥–µ—Ç—å" –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        
        print("‚úÖ –í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –ø—Ä–æ—à–µ–ª –¥–ª—è: \(testSuiteName!)")
    }
    
    func testWithSampleDataIsolation() {
        // –¢–µ—Å—Ç —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö - —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω
        
        launchAppWithSampleData()
        print("üîç –¢–µ—Å—Ç —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤: \(testSuiteName!)")
        
        let addButton = app.buttons["ShowRecordViewButton"]
        XCTAssertTrue(waitForElement(addButton), "Add button should exist")
        
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ
        
        print("‚úÖ –¢–µ—Å—Ç —Å –æ–±—Ä–∞–∑—Ü–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–µ–ª –¥–ª—è: \(testSuiteName!)")
    }
}

// MARK: - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –∏–∑–æ–ª—è—Ü–∏–µ–π

class AddButtonFunctionalTests: FullyIsolatedUITestCase {
    
    func testAddButtonBasicFunctionality() {
        launchApp()
        
        let addButton = app.buttons["ShowRecordViewButton"]
        XCTAssertTrue(waitForElement(addButton), "Add button should exist")
        XCTAssertTrue(addButton.isHittable, "Add button should be hittable")
        XCTAssertTrue(addButton.isEnabled, "Add button should be enabled")
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ
        addButton.tap()
        
        let sheet = app.sheets.firstMatch
        XCTAssertTrue(waitForElement(sheet, timeout: 3.0), "Input sheet should appear")
        
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤: \(testSuiteName!)")
    }
    
    func testAddButtonWithExistingData() {
        // –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        
        launchAppWithSampleData()
        
        let addButton = app.buttons["AddRecordButton"]
        XCTAssertTrue(waitForElement(addButton), "Add button should exist with data")
        
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        addButton.tap()
        
        let sheet = app.sheets.firstMatch
        XCTAssertTrue(waitForElement(sheet, timeout: 3.0), "Sheet should open with existing data")
        
        print("‚úÖ –ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏: \(testSuiteName!)")
    }
}

// MARK: - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã

class ParallelExecutionTests: FullyIsolatedUITestCase {
    
    func testParallelExecution1() {
        launchApp()
        
        let addButton = app.buttons["ShowRecordViewButton"]
        XCTAssertTrue(waitForElement(addButton))
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        Thread.sleep(forTimeInterval: 2.0)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        XCTAssertTrue(addButton.exists)
        XCTAssertTrue(addButton.isEnabled)
        
        print("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç 1 –∑–∞–≤–µ—Ä—à–µ–Ω: \(testSuiteName!)")
    }
    
    func testParallelExecution2() {
        launchApp()
        
        let addButton = app.buttons["ShowRecordViewButton"]
        XCTAssertTrue(waitForElement(addButton))
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥—É—é –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        Thread.sleep(forTimeInterval: 1.5)
        
        XCTAssertTrue(addButton.exists)
        XCTAssertTrue(addButton.isEnabled)
        
        print("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç 2 –∑–∞–≤–µ—Ä—à–µ–Ω: \(testSuiteName!)")
    }
    
    func testParallelExecution3() {
        launchAppWithSampleData()
        
        let addButton = app.buttons["ShowRecordViewButton"]
        XCTAssertTrue(waitForElement(addButton))
        
        Thread.sleep(forTimeInterval: 1.0)
        
        XCTAssertTrue(addButton.exists)
        
        print("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç 3 –∑–∞–≤–µ—Ä—à–µ–Ω: \(testSuiteName!)")
    }
}

// MARK: - –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –∏–∑–æ–ª—è—Ü–∏–∏

class IsolationStressTests: FullyIsolatedUITestCase {
    
    func testRapidTestExecution1() { performRapidTest(testNumber: 1) }
    func testRapidTestExecution2() { performRapidTest(testNumber: 2) }
    func testRapidTestExecution3() { performRapidTest(testNumber: 3) }
    func testRapidTestExecution4() { performRapidTest(testNumber: 4) }
    func testRapidTestExecution5() { performRapidTest(testNumber: 5) }
    
    private func performRapidTest(testNumber: Int) {
        launchApp()
        
        let addButton = app.buttons["ShowRecordViewButton"]
        XCTAssertTrue(waitForElement(addButton), "Rapid test \(testNumber) failed")
        
        addButton.tap()
        
        let sheet = app.sheets.firstMatch
        XCTAssertTrue(waitForElement(sheet, timeout: 3.0), "Sheet in rapid test \(testNumber) failed")
        
        sheet.swipeDown()
        
        print("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç \(testNumber) –∑–∞–≤–µ—Ä—à–µ–Ω: \(testSuiteName!)")
    }
}

// MARK: - –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–∑–æ–ª—è—Ü–∏–∏

extension FullyIsolatedUITestCase {
    
    func printIsolationDebugInfo() {
        print("\n=== DEBUG INFO FOR \(name) ===")
        print("Test Suite Name: \(testSuiteName!)")
        print("Launch Arguments: \(app.launchArguments)")
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        TestUserDefaultsManager.debugActiveSuites()
    }
    
    func verifyCompleteIsolation() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –Ω–∞—à–µ–º UserDefaults
        let testDefaults = UserDefaults(suiteName: testSuiteName)
        testDefaults?.set("isolated_test_value", forKey: "isolation_test_key")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π UserDefaults –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
        let standardValue = UserDefaults.standard.string(forKey: "isolation_test_key")
        XCTAssertNil(standardValue, "Standard UserDefaults should not contain isolated test data")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º UserDefaults
        let isolatedValue = testDefaults?.string(forKey: "isolation_test_key")
        XCTAssertEqual(isolatedValue, "isolated_test_value", "Test UserDefaults should contain isolated data")
        
        print("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è: \(testSuiteName!)")
    }
}

// MARK: - –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –ø–æ–ª–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–µ–π

class FullyIsolatedUITestCase: XCTestCase {
    
    var app: XCUIApplication!
    var testSuiteName: String!
    
    override func setUpWithError() throws {
        continueAfterFailure = false
        
        let name = "suite-\(UUID().uuidString)"
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π UserDefaults –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        testSuiteName = TestUserDefaultsManager.createTestSuite(for: name)
         
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = XCUIApplication()
        setupAppForTesting()
        
        // print("üß™ –¢–µ—Å—Ç '\(name)' –∑–∞–ø—É—â–µ–Ω —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º UserDefaults: \(testSuiteName!)")
    }
    
    override func tearDownWithError() throws {
        // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        TestUserDefaultsManager.cleanupTestSuite(testSuiteName)
        
        app = nil
        testSuiteName = nil
        
        print("üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ—á–∏—â–µ–Ω")
    }
    
    private func setupAppForTesting() {
        app.launchArguments = [
            "-UITesting",
            "-testSuite=testSuiteName",
            // "-testSuite=\(testSuiteName!)",
            "-resetData"
        ]
    }
    
    // MARK: - Helper Methods
    
    func launchApp(with additionalArguments: [String] = []) {
        app.launchArguments.append(contentsOf: additionalArguments)
        app.launch()
        
        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        let navigationBar = app.navigationBars["–î–Ω–µ–≤–Ω–∏–∫ —Å–∞—Ö–∞—Ä–∞"]
        XCTAssertTrue(navigationBar.waitForExistence(timeout: 10.0),
                     "App should load completely")
    }
    
    func launchAppWithSampleData() {
        launchApp(with: ["-loadSampleData"])
    }
}
